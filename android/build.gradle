// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        // buildToolsVersion = findProperty('android.buildToolsVersion') ?: '34.0.0'
        // minSdkVersion = Integer.parseInt(findProperty('android.minSdkVersion') ?: '21')
        // compileSdkVersion = Integer.parseInt(findProperty('android.compileSdkVersion') ?: '34')
        // targetSdkVersion = Integer.parseInt(findProperty('android.targetSdkVersion') ?: '34')
        // kotlinVersion = findProperty('android.kotlinVersion') ?: '1.8.10'
        // frescoVersion = findProperty('expo.frescoVersion') ?: '2.5.0'
        // kotlin_version = '1.9.25'
        // // We use NDK 23 which has both M1 support and is the side-by-side NDK version from AGP.
        // ndkVersion = "23.1.7779620"


 // These values are often defined here, OR in gradle.properties and read by findProperty()
        // If you define them here, they override values from gradle.properties if names conflict.
        // It's generally good to keep them in gradle.properties for easier management,
        // but ensure findProperty() correctly reads them.
        buildToolsVersion = findProperty('android.buildToolsVersion') ?: '34.0.0'
        minSdkVersion = Integer.parseInt(findProperty('android.minSdkVersion') ?: '24') // Make sure this default matches your needs
        compileSdkVersion = Integer.parseInt(findProperty('android.compileSdkVersion') ?: '35') // Make sure this default matches your needs
        targetSdkVersion = Integer.parseInt(findProperty('android.targetSdkVersion') ?: '35') // Make sure this default matches your needs
        kotlinVersion = findProperty('android.kotlinVersion') ?: '1.9.25' // Match to kotlin_version used below
        frescoVersion = findProperty('expo.frescoVersion') ?: '2.5.0'

        // Define kotlin_version explicitly here if not reliably from findProperty
        kotlin_version = '1.9.25' // This must match android.kotlinVersion from gradle.properties OR be the definitive source

        ndkVersion = "23.1.7779620"    }
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        // // classpath('com.android.tools.build:gradle:7.4.2')
        // classpath('com.android.tools.build:gradle:8.1.0')
        // classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
        // classpath "com.google.devtools.ksp:com.google.devtools.ksp.gradle.plugin:1.9.0-1.0.11" // Use a KSP version compatible with your Kotlin version
        // classpath('com.facebook.react:react-native-gradle-plugin')
        // classpath 'com.google.gms:google-services:4.3.15'

          // Essential Gradle plugins themselves
        classpath('com.android.tools.build:gradle:8.1.0') // Android Gradle Plugin (AGP)
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version") // Kotlin plugin
        // THIS IS THE CRUCIAL LINE FOR KSP
        // classpath "com.google.devtools.ksp:com.google.devtools.ksp.gradle.plugin:1.9.0-1.0.11" // <--- VERIFY THIS
       
        classpath "com.google.devtools.ksp:com.google.devtools.ksp.gradle.plugin:1.9.20-1.0.13" // 
        // Make sure the KSP version (e.g., 1.9.0-1.0.11) is compatible with your Kotlin version (1.9.25)
        // If 1.9.0-1.0.11 is not compatible with Kotlin 1.9.25, you'll need to find the right KSP version.
        // You might need KSP 1.9.20-1.0.13 or newer if using Kotlin 1.9.20+
        // A quick search for "KSP 1.9.25 compatibility" might help.
        classpath('com.facebook.react:react-native-gradle-plugin')
        classpath 'com.google.gms:google-services:4.3.15'
    }
}

allprojects {
    repositories {
        maven {
            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
            url(new File(['node', '--print', "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim(), '../android'))
        }
        maven {
            // Android JSC is installed from npm
            url(new File(['node', '--print', "require.resolve('jsc-android/package.json')"].execute(null, rootDir).text.trim(), '../dist'))
        }

        google()
        mavenCentral()
        maven { url 'https://www.jitpack.io' }
    }
}
// @generated begin expo-camera-import - expo prebuild (DO NOT MODIFY) sync-f244f4f3d8bf7229102e8f992b525b8602c74770
def expoCameraMavenPath = new File(["node", "--print", "require.resolve('expo-camera/package.json')"].execute(null, rootDir).text.trim(), "../android/maven")
allprojects { repositories { maven { url(expoCameraMavenPath) } } }
// @generated end expo-camera-import